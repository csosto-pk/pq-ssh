



EDNOTE: New PQ WG                                          P. Kampanakis
Internet-Draft                                             Cisco Systems
Intended status: Experimental                                 D. Stebila
Expires: 6 July 2022                              University of Waterloo
                                                               M. Friedl
                                                                 OpenSSH
                                                               T. Hansen
                                                                     AWS
                                                          2 January 2022


                Post-quantum Hybrid Key Exchange in SSH
                  draft-kampanakis-curdle-ssh-pq-ke-00

Abstract

   This document defines hybrid key exchange methods based on classical
   ECDH key exchange and post-quantum key encapsulation schemes.  These
   methods are defined for use in the SSH Transport Layer Protocol.

Note

   EDNOTE: Discussion of this work is encouraged to happen on the IETF
   WG Mailing List or in the GitHub repository which contains the draft:
   https://github.com/csosto-pk/pq-ssh/issues .

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 6 July 2022.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.




Kampanakis, et al.         Expires 6 July 2022                  [Page 1]

Internet-Draft                   PQ SSH                     January 2022


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   4
   2.  Hybrid Key Exchange . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Hybrid Key Exchange Method Abstraction  . . . . . . . . .   4
     2.2.  Hybrid Key Exchange Method Names  . . . . . . . . . . . .   5
       2.2.1.  ecdh-nistp256-TBD1-sha256 . . . . . . . . . . . . . .   5
       2.2.2.  x25519-TBD1-sha256  . . . . . . . . . . . . . . . . .   5
     2.3.  Shared Secret K . . . . . . . . . . . . . . . . . . . . .   6
     2.4.  Key Derivation  . . . . . . . . . . . . . . . . . . . . .   6
   3.  Message Size  . . . . . . . . . . . . . . . . . . . . . . . .   7
   4.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   7
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   7
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   9
     7.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   *Change Log* [EDNOTE: Remove before publicaton].

   draft-kampanakis-curdle-ssh-pq-ke-00  *  Initial draft replacing
         draft-kampanakis-curdle-pq-ssh-00

   Secure Shell (SSH) [RFC4251] performs key establishment using key
   exchange methods based exclusively on (Elliptic Curve) Diffie-Hellman
   style schemes.  SSH [RFC4252] [RFC8332] [RFC5656] [RFC8709] also
   defines public key authentication methods based on RSA or ECDSA/EdDSA
   signature schemes.  The cryptographic security of these key exchange
   and signature schemes relies on certain instances of the discrete
   logarithm and integer factorization problems being computationally
   infeasable to solve for adversaries.

   However, when sufficiently large quantum computers become available
   these instances would no longer be computationally infeasable
   rendering the current key exchange and authentication methods in SSH



Kampanakis, et al.         Expires 6 July 2022                  [Page 2]

Internet-Draft                   PQ SSH                     January 2022


   insecure [I-D.hoffman-c2pq].  While large quantum computers are not
   available today an adversary can record the encrypted communication
   sent between the client and server in an SSH session and then later
   decrypt the communication when sufficiently large quantum computers
   become available.  This kind of attack is known as a "record-and-
   harvest" attack.

   This document proposes to address the problem by extending the SSH
   Transport Layer Protocol [RFC4253] with hybrid key exchange methods.
   A hybrid key exchange method maintains the same level of security
   provided by current key exchange methods, but also adds quantum
   resistance.  The security provided by the individual key exchange
   scheme in a hybrid key exchange method is independent.  This means
   that the hybrid key exchange method will always be at least as secure
   as the most secure key exchange scheme executed as part of the hybrid
   key exchange.  [PQ-PROOF] contains proofs of security for such hybrid
   key exchange schemes.

   In the context of the NIST Post-Quantum Cryptography Standardization
   Project [NIST_PQ], key exchange algorithms are formulated as key
   encapsulation mechanisms (KEMs), which consist of three algorithms:

   *  'KeyGen() -> (pk, sk)': A probabilistic key generation algorithm,
      which generates a public key 'pk' and a secret key 'sk'.

   *  'Encaps(pk) -> (ct, ss)': A probabilistic encapsulation algorithm,
      which takes as input a public key 'pk' and outputs a ciphertext
      'ct' and shared secret 'ss'.

   *  'Decaps(sk, ct) -> ss': A decapsulation algorithm, which takes as
      input a secret key 'sk' and ciphertext 'ct' and outputs a shared
      secret 'ss', or in some cases a distinguished error value.

   The main security property for KEMs is indistinguishability under
   adaptive chosen ciphertext attack (IND-CCA2), which means that shared
   secret values should be indistinguishable from random strings even
   given the ability to have arbitrary ciphertexts decapsulated.  IND-
   CCA2 corresponds to security against an active attacker, and the
   public key / secret key pair can be treated as a long-term key or
   reused.  A weaker security notion is indistinguishability under
   chosen plaintext attack (IND-CPA), which means that the shared secret
   values should be indistinguishable from random strings given a copy
   of the public key.  IND-CPA roughly corresponds to security against a
   passive attacker, and sometimes corresponds to one-time key exchange.







Kampanakis, et al.         Expires 6 July 2022                  [Page 3]

Internet-Draft                   PQ SSH                     January 2022


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  Hybrid Key Exchange

2.1.  Hybrid Key Exchange Method Abstraction

   This section defines the abstract structure of a hybrid key exchange
   method.  This structure must be instantiated with two key exchange
   schemes.  The byte, string and mpint are to be interpreted in this
   document as described in [RFC4251].

   Instead of SSH_MSG_KEXDH_INIT [RFC4253] or SSH_MSG_KEX_ECDH_INIT
   [RFC5656], the client sends

          byte SSH_MSG_HBR_INIT
          string C_INIT

   where C_INIT would be the concatenation of C_PK1 and C_PK2.  C_PK1
   and C_PK2 represent the ephemeral client public keys used for each
   key exchange of the hybrid mechanism.  C_PK1 represents a classical
   key exchange public key (i.e., (EC)DH)).  C_PK2 represents the 'pk'
   output of the corresponding post-quantum KEM's 'KeyGen' at the
   client.

   Instead of SSH_MSG_KEXDH_REPLY [RFC4253] or SSH_MSG_KEX_ECDH_REPLY
   [RFC5656], the server sends

          byte SSH_MSG_HBR_REPLY
          string S_REPLY

   where S_REPLY would be the concatenation of S_PK1 and S_CT2.  S_PK1
   represents the ephemeral (EC)DH server public key.  S_CT2 represents
   the ciphertext 'ct' output of the corresponding KEM's 'Encaps'
   algorithm generated by the server which encapsulates a secret to the
   client public key C_PK2.

   [EDNOTE: Initially we were encoding the server and client client and
   server classical and post-quantum public key/ciphertext as its own
   string.  We since switched to an encoding method which concatenates
   them together as a single string in the C_INIT, S_REPLY message.
   This method concatenates the raw values rather than the length of
   each value plus the value.  The total length of the concatenation is
   still known, but the relative lengths of the individual values that
   were concatenated is no longer part of the representation.  If that



Kampanakis, et al.         Expires 6 July 2022                  [Page 4]

Internet-Draft                   PQ SSH                     January 2022


   is the WG consensus we need to put a note of this in the Appendix for
   historical reference and expand on the concatenated string here in
   this section.]

   C_PK1, S_PK1, C_PK2, C_CT2 are used to establish two shared secrets,
   K_CL and K_PQ.  K_CL is the output from the classical (EC)DH exchange
   using C_PK1 and S_PK1.  K_PQ is the output of the post-quantum KEM
   exchange using C_PK2 and C_CT2.  K_CL and K_PQ are used to generate
   SSH encryption keys.

2.2.  Hybrid Key Exchange Method Names

   The hybrid key exchange method names defined in this document (to be
   used in SSH_MSG_KEXINIT [RFC4253]) are

         ecdh-nistp256-TBD1-sha256
         x25519-TBD1-sha256
         sntrup4591761x25519-sha512@tinyssh.org (currently implemented)

   These instantiate abstract hybrid key exchanges defined in
   Section 2.1.

   [EDNOTE: Placeholder.  Algorithms will be identified after NIST Round
   3 concludes.]

2.2.1.  ecdh-nistp256-TBD1-sha256

   ecdh-nistp256-TBD1-sha256 defines that the classical client and
   server public keys C_PK1, S_PK1 belong to the NIST P-256 curve
   [nist-sp800-186].  The private and public keys are generated as
   described therein.  The public keys are defined as strings of 32
   bytes [EDNOTE: Confirm representation] for NIST P-256.  The K_CL
   shared secret is generated from the exchanged C_PK1 and S_PK1 public
   keys as defined in [RFC5656] (key agreement method ecdh-
   sha2-nistp256) with SHA-256 [nist-sha2] [RFC4634] .

   The post-quantum C_PK2 or S_CT2 string from the client and server are
   TBD1.  The K_PQ shared secret is decapsulated from the ciphertext
   S_CT2 using the client private key [EDNOTE: Placeholder.  Update
   based on the algorithm identified after NIST Round 3 concludes.]

2.2.2.  x25519-TBD1-sha256

   x25519-TBD1-sha256 defines that the classical client and server
   public keys C_PK1, S_PK1 belong to the Curve25519 curve [RFC7748].
   Private and public keys are generated as described therein.  The
   public keys are defined as strings of 32 bytes.  The K_CL shared
   secret is generated from the exchanged C_PK1 and S_PK1 public keys as



Kampanakis, et al.         Expires 6 July 2022                  [Page 5]

Internet-Draft                   PQ SSH                     January 2022


   defined in [RFC8731] (key agreement method curve25519-sha256) with
   SHA-256 [nist-sha2] [RFC4634] .

   The post-quantum C_PK2 or S_CT2 string from the client and server are
   TBD1.  The K_PQ shared secret is decapsulated from the ciphertext
   S_CT2 using the client post-quantum KEM private key [EDNOTE:
   Placeholder.  Update based on the algorithm identified after NIST
   Round 3 concludes.]

2.3.  Shared Secret K

   The shared secret, K, is defined in [RFC4253] and [RFC5656] as an
   integer encoded as a multiple precision integer (mpint).  The hybrid
   key exchange establishes two a binary strings K_CL and K_PQ by using
   scalar multiplication and post-quantum KEM decapsulation ('Decaps')
   respectively.  K is the concatenation of the two shared secrets K_CL
   and K_PQ as

           K = K_CL || K_PQ

   This is the same logic as in [I-D.ietf-tls-hybrid-design] where the
   classical and post-quantum exchanged secrets are concatenated and
   used in the key schedule.

   The concatenated bytes are converted into K by interpreting the
   octets as an unsigned fixed-length integer encoded in network byte
   order.  The mpint K is then encoded using the process described in
   Section 5 of [RFC4251], and the resulting bytes are fed to the key
   exchange method's hash function to generate encryption keys as
   described in [RFC4253].

   *FIPS-compliance of shared secret concatenation.* [NIST-SP-800-56C]
   or [NIST-SP-800-135] give NIST recommendations for key derivation
   methods in key exchange protocols.  Some hybrid combinations may
   combine the shared secret from a NIST-approved algorithm (e.g., ECDH
   using the nistp256/secp256r1 curve) with a shared secret from a non-
   approved algorithm (e.g., post-quantum).  [NIST-SP-800-56C] lists
   simple concatenation as an approved method for generation of a hybrid
   shared secret in which one of the constituent shared secret is from
   an approved method.

2.4.  Key Derivation

   The derivation of encryption keys MUST be done from shared secret K
   according to Section 7.2 in [RFC4253] with a modification on the
   exchange hash H.





Kampanakis, et al.         Expires 6 July 2022                  [Page 6]

Internet-Draft                   PQ SSH                     January 2022


   The hybrid key exchange hash H is the result of computing the HASH,
   where HASH is the hash algorithm specified in the named hybrid key
   exchange method name, over the concatenation of the following

         string V_C, client identification string (CR and LF excluded)
         string V_S, server identification string (CR and LF excluded)
         string I_C, payload of the client's SSH_MSG_KEXINIT
         string I_S, payload of the server's SSH_MSG_KEXINIT
         string C_INIT, client message octet string
         string S_REPLY, server message octet string
         string K, SSH shared secret

   The HASH functions used for the definitions in this specification are
   SHA-256 [nist-sha2] [RFC4634][EDNOTE: Update here if necessary].

3.  Message Size

   An implementation adhering to [RFC4253] must be able to support
   packets with an uncompressed payload length of 32768 bytes or less
   and a total packet size of 35000 bytes or less (including
   'packet_length', 'padding_length', 'payload', 'random padding', and
   'mac').  These numbers represent what must be 'minimally supported'
   by implementations.  This can present a problem when using post-
   quantum key exchange schemes because some post-quantum schemes can
   produce much larger messages than what is normally produced by
   existing key exchange methods defined for SSH.  This document does
   not define any named domain parameters (Section 2.2) that cause any
   hybrid key exchange method related packets to exceed the minimally
   supported packet length.  This document does not define behaviour in
   cases where a hybrid key exchange message cause a packet to exceed
   the minimally supported packet length.

4.  Acknowledgements

5.  IANA Considerations

   This memo includes requests of IANA to register new messages
   SSH_MSG_HBR_INIT, SSH_MSG_HBR_REPLY in the "Message Numbers" registry
   for SSH [IANA-SSH].

   It also requests for new method names "ecdh-nistp256-TBD1-sha256",
   "x25519-TBD1-sha256" to be registered by IANA in the "Key Exchange
   Method Names" registry for SSH [IANA-SSH].








Kampanakis, et al.         Expires 6 July 2022                  [Page 7]

Internet-Draft                   PQ SSH                     January 2022


6.  Security Considerations

   The way the derived mpint binary secret string is encoded (i.e.,
   adding or removing zero bytes for encoding) before it is hashed
   raises the potential for a side-channel attack, which could determine
   the length of what is hashed.  This could leak the most significant
   bit of the derived secret and/or allow detection of when the most
   significant bytes are zero.  It was decided not to address this
   potential problem.

   [EDNOTE: The security considerations given in [RFC5656] therefore
   also applies to the ECDH key exchange scheme defined in this
   document.  Similarly for the X25519 document.  PQ Algorithms are
   newer and standardized by NIST.  And more.  Should include something
   about the combination method for the KEM shared secrets. ]

   [EDNOTE: Discussion on whether an IND-CCA KEM is required or whether
   IND-CPA suffices.]  Any KEM used in the manner described in this
   document MUST explicitly be designed to be secure in the event that
   the public key is re-used, such as achieving IND-CCA2 security or
   having a transform like the Fujisaki-Okamoto transform [FO][HHK]
   applied.  While it is recommended that implementations avoid reuse of
   KEM public keys, implementations that do reuse KEM public keys MUST
   ensure that the number of reuses of a KEM public key abides by any
   bounds in the specification of the KEM or subsequent security
   analyses.  Implementations MUST NOT reuse randomness in the
   generation of KEM ciphertexts.

   *Public keys, ciphertexts, and secrets should be constant length.*
   This document assumes that the length of each public key, ciphertext,
   and shared secret is fixed once the algorithm is fixed.  This is the
   case for all Round 3 finalists and alternate candidates.

   Note that variable-length secrets are, generally speaking, dangerous.
   In particular, when using key material of variable length and
   processing it using hash functions, a timing side channel may arise.
   In broad terms, when the secret is longer, the hash function may need
   to process more blocks internally.  In some unfortunate
   circumstances, this has led to timing attacks, e.g. the Lucky
   Thirteen [LUCKY13] and Raccoon [RACCOON] attacks.

   Therefore, this specification MUST only be used with algorithms which
   have fixed-length shared secrets (after the variant has been fixed by
   the algorithm identifier in the Method Names negotiation in
   Section 2.2).

7.  References




Kampanakis, et al.         Expires 6 July 2022                  [Page 8]

Internet-Draft                   PQ SSH                     January 2022


7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4251]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Protocol Architecture", RFC 4251, DOI 10.17487/RFC4251,
              January 2006, <https://www.rfc-editor.org/info/rfc4251>.

   [RFC4252]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Authentication Protocol", RFC 4252, DOI 10.17487/RFC4252,
              January 2006, <https://www.rfc-editor.org/info/rfc4252>.

   [RFC4253]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Transport Layer Protocol", RFC 4253, DOI 10.17487/RFC4253,
              January 2006, <https://www.rfc-editor.org/info/rfc4253>.

7.2.  Informative References

   [FO]       Fujisaki, E. and T. Okamoto, "Secure Integration of
              Asymmetric and Symmetric Encryption Schemes",
              DOI 10.1007/s00145-011-9114-1, Journal of Cryptology Vol.
              26, pp. 80-101, December 2011,
              <https://doi.org/10.1007/s00145-011-9114-1>.

   [HHK]      Hofheinz, D., Hövelmanns, K., and E. Kiltz, "A Modular
              Analysis of the Fujisaki-Okamoto Transformation",
              DOI 10.1007/978-3-319-70500-2_12, Theory of
              Cryptography pp. 341-371, 2017,
              <https://doi.org/10.1007/978-3-319-70500-2_12>.

   [I-D.hoffman-c2pq]
              Hoffman, P., "The Transition from Classical to Post-
              Quantum Cryptography", Work in Progress, Internet-Draft,
              draft-hoffman-c2pq-07, 26 May 2020,
              <https://tools.ietf.org/html/draft-hoffman-c2pq-07>.

   [I-D.ietf-tls-hybrid-design]
              Stebila, D., Fluhrer, S., and S. Gueron, "Hybrid key
              exchange in TLS 1.3", Work in Progress, Internet-Draft,
              draft-ietf-tls-hybrid-design-03, 13 July 2021,
              <https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-
              03>.

   [IANA-SSH] IANA, "Secure Shell (SSH) Protocol Parameters", 2021,




Kampanakis, et al.         Expires 6 July 2022                  [Page 9]

Internet-Draft                   PQ SSH                     January 2022


              <https://www.iana.org/assignments/ssh-parameters/ssh-
              parameters.xhtml>.

   [LUCKY13]  Al Fardan, N.J. and K.G. Paterson, "Lucky Thirteen:
              Breaking the TLS and DTLS record protocols", 2013,
              <https://ieeexplore.ieee.org/
              iel7/6547086/6547088/06547131.pdf>.

   [nist-sha2]
              NIST, "FIPS PUB 180-4", 2015,
              <https://nvlpubs.nist.gov/nistpubs/FIPS/
              NIST.FIPS.180-4.pdf>.

   [NIST-SP-800-135]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Existing Application-Specific Key
              Derivation Functions", December 2011,
              <https://doi.org/10.6028/NIST.SP.800-135r1>.

   [NIST-SP-800-56C]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Key-Derivation Methods in Key-
              Establishment Schemes", August 2020,
              <https://doi.org/10.6028/NIST.SP.800-56Cr2>.

   [nist-sp800-186]
              NIST, "SP 800-186", 2019,
              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
              NIST.SP.800-186-draft.pdf>.

   [NIST_PQ]  NIST, "Post-Quantum Cryptography", 2020,
              <https://csrc.nist.gov/projects/post-quantum-
              cryptography>.

   [PQ-PROOF] Campagna, M. and A. Petcher, "Security of Hybrid Key
              Encapsulation", 2020, <https://eprint.iacr.org/2020/1364>.

   [RACCOON]  Merget, R., Brinkmann, M., Aviram, N., Somorovsky, J.,
              Mittmann, J., and J. Schwenk, "Raccoon Attack: Finding and
              Exploiting Most-Significant-Bit-Oracles in TLS-DH(E)",
              September 2020, <https://raccoon-attack.com/>.

   [RFC4634]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and HMAC-SHA)", RFC 4634, DOI 10.17487/RFC4634, July
              2006, <https://www.rfc-editor.org/info/rfc4634>.

   [RFC5656]  Stebila, D. and J. Green, "Elliptic Curve Algorithm
              Integration in the Secure Shell Transport Layer",



Kampanakis, et al.         Expires 6 July 2022                 [Page 10]

Internet-Draft                   PQ SSH                     January 2022


              RFC 5656, DOI 10.17487/RFC5656, December 2009,
              <https://www.rfc-editor.org/info/rfc5656>.

   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
              for Security", RFC 7748, DOI 10.17487/RFC7748, January
              2016, <https://www.rfc-editor.org/info/rfc7748>.

   [RFC8332]  Bider, D., "Use of RSA Keys with SHA-256 and SHA-512 in
              the Secure Shell (SSH) Protocol", RFC 8332,
              DOI 10.17487/RFC8332, March 2018,
              <https://www.rfc-editor.org/info/rfc8332>.

   [RFC8709]  Harris, B. and L. Velvindron, "Ed25519 and Ed448 Public
              Key Algorithms for the Secure Shell (SSH) Protocol",
              RFC 8709, DOI 10.17487/RFC8709, February 2020,
              <https://www.rfc-editor.org/info/rfc8709>.

   [RFC8731]  Adamantiadis, A., Josefsson, S., and M. Baushke, "Secure
              Shell (SSH) Key Exchange Method Using Curve25519 and
              Curve448", RFC 8731, DOI 10.17487/RFC8731, February 2020,
              <https://www.rfc-editor.org/info/rfc8731>.

Authors' Addresses

   Panos Kampanakis
   Cisco Systems

   Email: pkampana@cisco.com


   Douglas Stebila
   University of Waterloo

   Email: dstebila@uwaterloo.ca


   Markus Friedl
   OpenSSH

   Email: markus@openbsd.org


   Torben Hansen
   AWS

   Email: htorben@amazon.com





Kampanakis, et al.         Expires 6 July 2022                 [Page 11]
